type Course {
  "tipo ID es un escalar que permite utilizar identificadores de tipo string"
  _id: ID!
  title: String!
  teacher: String
  description: String!
  topic: String
}

type Student {
  _id: ID!
  name: String!
  email: String
}

type Query { 
  "query para consultar los cursos, debe devolver un array que contenga informacion semejante a la del tipo course"
  getCourses: [Course]
  "Devuelve un curso"
  getCourse(id: ID!): Course
  "Devuelve todos los estudiantes"
  getStudents: [Student]
  "Devuelve un estudiante"
  getStudent(id: ID!): Student
}

input CourseInput {
  title: String!
  teacher: String
  description: String!
  topic: String
}

input CourseEditInput {
  title: String!
  teacher: String
  description: String!
  topic: String
}

input StudentInput {
  name: String!
  email: String!
}

input StudentEditInput {
  name: String
  email: String
}

type Mutation {
  "se definen las operaciones que van a permitir almacenar informacion. Los imputs son plantillas que nos permiten saber que campos son necesarios para poder insertar informacion"
  createCourse(input: CourseInput!): Course
  "Edit one course"
  editCourse(_id: ID!, input: CourseEditInput!): Course
  "Create one student"
  createStudent(input: StudentInput!): Student
  "Create one student"
  editStudent(_id: ID!, input: StudentEditInput!): Student
}